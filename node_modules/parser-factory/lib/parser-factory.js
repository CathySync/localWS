var parser = require('parser');

var ParserFactory = module.exports = function ParserFactory(){

};

ParserFactory.prototype.getParser = function(fileArgument){
    var type = this.getFileType(fileArgument);
    var options = this.setOptions(type);
    options.location = fileArgument;
    
    switch(type){
        case "strings":{
                return new parser(options);
                break;
        }
        case "properties":{
                return new parser(options);
                break;
        }
        case "csv":{
                //return new CSVparser(options);
                return new parser(options);
                break;
        }
        case "xml":{
                //return new XMLparser(options);
                break;
        }
        case "xlsx":{
                //return new XLSXparser(options);
                break;
        }
        case "xls":{
                //return new XLSparser(options);
                break;
        }
        default:
            return new parser(options)
    }

};

ParserFactory.prototype.getFileType = getFileType;
ParserFactory.prototype.setOptions = setOptions;

/**
 * 
 * @param {type} fileArgument
 * @returns {unresolved}
 */
function getFileType (filename){
    if(!filename) throw new Error("getFileType: no file name");
    var lastDot = filename.split(".")
    return lastDot[lastDot.length-1];
}
/**
 * 
 * @param {type} type
 * @returns {nm$_parser-factory.setOptions.options}
 */
function setOptions(type){
    var options = {
        type: type,
    };
    options["delimiter"] = setDelimiter(type);
    options["comment"] = setComment(type);
    return options;
}

function setDelimiter(type){
    switch(type){
        case "strings":{
                return  "=";
                break;
        }
        case "properties":{
                return "=";
                break;
        }
        case "csv":{
                return ","
        }
        case "xml":
        case "xlsx":
        default:
            return "\n";
    }
}
function setComment(type){
    switch(type){
        case "strings":{
                return validateRegExp(/\/*/);
                break;
        }
        case "properties":{
                return "=";
                return validateRegExp(/#/);
                break;
        }
        case "csv":
        case "xml":
        case "xlsx":
        default:
            return "//";
    }
}
/**
 * 
 * @param {RegExp} rxArg
 * @returns {RegExp | Error}
 */
function validateRegExp(rxArg){
    var isValid;
    try { 
        new RegExp(rxArg);
        isValid = true;
    }
    catch(e) {
        isValid = false;
    }

    if(isValid){
        return rxArg;
    } else {
        throw new Error("ParserFactory tried to set invalid comment delimiter:" + rxArg);
    }
}
